// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String?
  photoUrl  String?
  role      UserRole @default(STUDENT)
  isPremium Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  progress Progress[]
  courses  Course[]  // For admin users who create courses
  accounts Account[] // NextAuth.js
  sessions Session[] // NextAuth.js

  @@map("users")
}

model Course {
  id        String   @id @default(cuid())
  title     String
  language  String   @default("Solidity")
  goals     String
  level     CourseLevel
  access    CourseAccess
  status    CourseStatus @default(ACTIVE)
  thumbnail String?  // Path to thumbnail image
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  modules  Module[]
  creator  User     @relation(fields: [creatorId], references: [id])
  creatorId String
  progress Progress[]

  @@map("courses")
}

model Module {
  id          String   @id @default(cuid())
  title       String
  description String
  order       Int      // To maintain module sequence
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  course   Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId String
  lessons  Lesson[]
  progress Progress[]

  @@map("modules")
}

model Lesson {
  id              String      @id @default(cuid())
  type            LessonType
  title           String
  contentMarkdown String?
  youtubeUrl      String?
  order           Int         // To maintain lesson sequence within module
  initialCode     String?
  solutionCode    String?
  tests           String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  // Relations
  module         Module         @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  moduleId       String
  progress       Progress[]
  quizQuestions  QuizQuestion[]

  @@map("lessons")
}

model QuizQuestion {
  id            String   @id @default(cuid())
  question      String
  options       String[]
  correctOption Int
  order         Int      // To maintain question sequence
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  lesson   Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  lessonId String

  @@map("quiz_questions")
}

model Progress {
  id        String   @id @default(cuid())
  completed Boolean  @default(false)
  quizScore Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String
  course   Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId String
  module   Module   @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  moduleId String
  lesson   Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  lessonId String

  @@unique([userId, courseId, moduleId, lessonId])
  @@map("progress")
}

model PasswordReset {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@map("password_resets")
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

enum UserRole {
  STUDENT
  ADMIN
}

enum CourseLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum CourseAccess {
  FREE
  PAID
}

enum CourseStatus {
  ACTIVE
  DEACTIVATED
}

enum LessonType {
  INTRO
  QUIZ
  CHALLENGE
}
